package node

import (
	"crypto/sha256"
	"fmt"
	"os"
	"path/filepath"
	"testing"
	"time"

	"github.com/232425wxy/meta--/config"
	"github.com/232425wxy/meta--/log"
	"github.com/spf13/viper"
	"github.com/stretchr/testify/assert"
)

func ReadConfigFile(path string) *config.Config {
	viper.AddConfigPath(filepath.Join(path, "config"))
	if err := viper.ReadInConfig(); err != nil {
		panic(err)
	}
	cfg := &config.Config{}
	if err := viper.Unmarshal(cfg); err != nil {
		panic(err)
	}
	viper.Reset()
	return cfg
}

func AdjustHomePath(cfg *config.Config) {
	var path = "../"
	cfg.BasicConfig.Home = fmt.Sprintf("%s/cmd/%s", path, cfg.BasicConfig.Home)
	cfg.P2PConfig.Home = fmt.Sprintf("%s/cmd/%s", path, cfg.P2PConfig.Home)
	cfg.ConsensusConfig.Home = fmt.Sprintf("%s/cmd/%s", path, cfg.ConsensusConfig.Home)
	cfg.TxsPoolConfig.Home = fmt.Sprintf("%s/cmd/%s", path, cfg.TxsPoolConfig.Home)
}

func CreateNode(i int) *Node {
	dir := fmt.Sprintf("../cmd/node%d", i)
	cfg := ReadConfigFile(dir)
	AdjustHomePath(cfg)
	logger := log.New("node", "test")
	logger.SetHandler(log.LvlFilterHandler(log.LvlTrace, log.StreamHandler(os.Stdout, log.TerminalFormat(true))))
	log.PrintOrigins(true)

	node, err := NewNode(cfg, logger, DefaultProvider())
	if err != nil {
		panic(err)
	}
	return node
}

func TestCreateAndStartNode(t *testing.T) {
	nodes := make([]*Node, 4)
	nodes[0] = CreateNode(0)
	nodes[1] = CreateNode(1)
	nodes[2] = CreateNode(2)
	nodes[3] = CreateNode(3)

	for i := 0; i < len(nodes); i++ {
		go func(i int) { assert.Nil(t, nodes[i].Start()) }(i)
	}

	time.Sleep(time.Second * 6)
	// tx := []byte(fmt.Sprintf("%x=%x", []byte("data"), []byte("区块链")))
	time.Sleep(time.Second * 6)
	jsonStr := `{
		"ipfshash": "QmewtY21Ufyqa166AWXrSC3Y3FMqKMhpRRPH2tqTNMUALE",
		"policiesCiper": "{'kw_set_name': ['PREENACT', 'TAVAST', 'KINURA', 'ESCOFFIER', 'LENZ', 'PRIZERS'], 'ct_1': {'PREENACT': [11394296616409681867878543963831882999086592982652214444402234763206, 5984670056162709749934797474265782313792430919305425104686246243504], 'TAVAST': [9651469531278682752411578696643770222015816427945336385253788153933, 712699597661067803023807904097199670544120532195285635123912758917], 'KINURA': [2442802561046517938020193098422361994042611804114104786965897518012, 5308227714725500850467410536711711481855244618307768157083064467046], 'ESCOFFIER': [12327117410864001488549437962572314395985053665321349168538393460518, 6193277857705410756776636843003025693694809953806859899658479806572], 'LENZ': [1684271658163235371617822694567901289748103726944642924493318167401, 14445010715007447425893238107597892929895171694103704051194241550082], 'PRIZERS': [131980284622779866989653086115273431204033071870995302629282576640, 4952532865593017815410165253915837369104702410134970955873935227946]}, 'ct_2': [[5973447569816739452015395183179335972242418985611276437337427005856, 11415735395620184215925328472113470991980439353376758221007719839749, 7754796285271611134054472777979228561153927831536780396782379934185], [13466114442641307848539608922647786418676395580547470418763167736015, 3704508596297814965394926052552143925198939786567746400558109746571, 8998460892842320515955779399608959230509177245967893225912416331207]], 'ct_3': [[10518150093964858763117695139871391732381178498606641532684441516911, 13054037442788171655664540116358141884693852939552021568103117828631, 5244930336269631204539291048386457555296415438033603090127672015604], [11936462337979817993335078249627327239608407964382719583066347360453, 3955092169704911823999489698671624396557485580553360238975824247570, 6485100624549212896727964678446380657716713064716909899137612520108]], 'ct_4': [[7036313421442065478873729459377773235505975585540290674724550341214, 7814607744116647647857413091680928234777995297462596399086810314790, 14573258059061457332287589758989424202782092240777135601692337003074], [8613436353737694717838005127180765907262650382205551840066329079658, 8216800447889596168905972642920150466785397181809923990113085656744, 5979113661452812858028041276575156466384285276620823152719023320711]]}",
		"metadata": "1",
		"sign": ""
	}`
	jsonBytes := []byte(jsonStr)
	for i := 0; i < 16; i++ {
		tx := []byte(fmt.Sprintf("%x=%x", jsonBytes, []byte(fmt.Sprintf("%d", i))))
		// 	err := nodes[i%4].txsPool.CheckTx(tx, nodes[i%4].nodeInfo.ID())
		// 	assert.Nil(t, err)
		// 	time.Sleep(time.Millisecond * 1)
		err := nodes[i%4].txsPool.CheckTx(tx, nodes[i%4].nodeInfo.ID())
		assert.Nil(t, err)
		time.Sleep(time.Millisecond * 100)
	}
	time.Sleep(time.Second * 6)
	time.Sleep(time.Second * 1)
	nodes[0].State().RedactBlock(1, 0, []byte("data"), []byte("blockchain"))
	time.Sleep(time.Second * 3)

	fmt.Println(nodes[0].blockStore.LoadBlockByHeight(1).String())

	nodes[0].State().RedactBlock(1, 0, []byte("data"), []byte("testblockchain"))
	fmt.Println("after modify")
	fmt.Println(nodes[0].blockStore.LoadBlockByHeight(1).String())
	time.Sleep(time.Second * 10)
	fmt.Println("finish")
}

func TestName(t *testing.T) {
	s := []byte("1662752367981358478140862759608613144712037411041726893081220576543761682341626337031682502793611742798297090067115192809589292260191992491759811668357940529302152247884394812472019483640159908766027008134032444363930144988172130437679673657583637403155234891485580057349421083124028111804888049368891875025755847956359804119109679138462556349183134351695790497601804060205090351315972506082974845195058458011974008658040900287281558721007107400150104188074180141394662418123318666960689671048548289800563884586402189757218481713197654452771312550848053587721722732290006708751317506037753322744090498429913628376037667925041864917682923438812769566723957312338774319920883186515619329541746744661674476114263639617748568812171787637166786323870426769174676705236399805817315195864829492568131311736026826043924311582407870128363533167047542404720511787733624527839598948652474665639647051527698006350829298562529512323002517106770902258911644298370932129654229431569563566849994343997463834695487028266066122544458464514669824159616114147931001920155950208477368780619486335274037478715737995572028015499457842682225309074478614426350459364409621703813607924006148955595133843493100077504998445298343668317746098695274560197070053489615358608951158091497025380302705001444760101299349419364059419624803150796396608271192017835694608992229147179073325811932434822969748155453991211725781682924997489541937605299817087192452368277042335132448236358185127129306502720532886967462631646193062294367718518351039387483697941072104217946464703793908805216223057785614351986038275745456086211325203768098426260825528368201384939939521354882308108246133649432062715070024801117463567306286974536258926888372532402526048445731940174974953302455303332634948161945727759655238684984479407187310856881043062887096288871862354984886141005410532495884761865552034014013287419236379788622479316727140876196831674249611057821135341362825209900491867537469824917190695989268380153941955783583175562541144468716346225097338997566581239970594151841653650394444660406589638809507290932760295704837424962096674366162062312062986058718799954586217957733229731688650976714326669696357080979273524353715261980220364664845977280878256635958876308985694990378259055823171627481587080416571684574004756258355128818347850983582531805705399739700756381977732512467788720001180888200674468641846564157195349550941245388525490921054291487413422969873297688082820557865529347023754050099047464947406681525848070382115608749501569537539842053228651756001150293607740300613484600474636590253192215215364062316681398998325932612281998310921890694703120863094641099695803090536040625887759707381826990061019778613858475192129810681902364322792714629906022970367593348572720008251707187389611992185027682242013791680917113838635300815572941922899535502400805374743682783414045396100508368074571234497859368858920200174457742494283065870949504795642148661131166045467489358789392424974086847253361563245684463563806186913556157591540542727672227610262224872856715674332449656037536604864184723846755655105419155792000")
	h := sha256.New()
	t.Log(h.Sum(s))
}

// 1662752367981358478140862759608613144712037411041726893081220576543761682341626337031682502793611742798297090067115192809589292260191992491759811668357940529302152247884394812472019483640159908766027008134032444363930144988172130437679673657583637403155234891485580057349421083124028111804888049368891875025755847956359804119109679138462556349183134351695790497601804060205090351315972506082974845195058458011974008658040900287281558721007107400150104188074180141394662418123318666960689671048548289800563884586402189757218481713197654452771312550848053587721722732290006708751317506037753322744090498429913628376037667925041864917682923438812769566723957312338774319920883186515619329541746744661674476114263639617748568812171787637166786323870426769174676705236399805817315195864829492568131311736026826043924311582407870128363533167047542404720511787733624527839598948652474665639647051527698006350829298562529512323002517106770902258911644298370932129654229431569563566849994343997463834695487028266066122544458464514669824159616114147931001920155950208477368780619486335274037478715737995572028015499457842682225309074478614426350459364409621703813607924006148955595133843493100077504998445298343668317746098695274560197070053489615358608951158091497025380302705001444760101299349419364059419624803150796396608271192017835694608992229147179073325811932434822969748155453991211725781682924997489541937605299817087192452368277042335132448236358185127129306502720532886967462631646193062294367718518351039387483697941072104217946464703793908805216223057785614351986038275745456086211325203768098426260825528368201384939939521354882308108246133649432062715070024801117463567306286974536258926888372532402526048445731940174974953302455303332634948161945727759655238684984479407187310856881043062887096288871862354984886141005410532495884761865552034014013287419236379788622479316727140876196831674249611057821135341362825209900491867537469824917190695989268380153941955783583175562541144468716346225097338997566581239970594151841653650394444660406589638809507290932760295704837424962096674366162062312062986058718799954586217957733229731688650976714326669696357080979273524353715261980220364664845977280878256635958876308985694990378259055823171627481587080416571684574004756258355128818347850983582531805705399739700756381977732512467788720001180888200674468641846564157195349550941245388525490921054291487413422969873297688082820557865529347023754050099047464947406681525848070382115608749501569537539842053228651756001150293607740300613484600474636590253192215215364062316681398998325932612281998310921890694703120863094641099695803090536040625887759707381826990061019778613858475192129810681902364322792714629906022970367593348572720008251707187389611992185027682242013791680917113838635300815572941922899535502400805374743682783414045396100508368074571234497859368858920200174457742494283065870949504795642148661131166045467489358789392424974086847253361563245684463563806186913556157591540542727672227610262224872856715674332449656037536604864184723846755655105419155792000
